NEW INSTALLS:
    pip3 install flask-login
    pip3 install email-validator
    -- Verification of emails inside of forms, we didn't learn how to do this


CREATE NEW FILES:
    login.html


EDIT FILES:
=========================
ROUTES.py
    IMPORTS:
    from .forms import SignUpForm, LoginForm, <make-sure-you-import-all-forms>
    from flask_login import login_user, logout_user, login_required, current_user
    from .models import User, <any other imports>

    @app.route('/login', methods=["GET", "POST"])
    def loginPage():
        form = LoginForm()
        if form.validate(): # if form is valid
            username = form.username.data
            password = form.password.data

            # what we want: SELECT * FROM user WHERE username=username
            # SQLAlchemy has a query that we can use
            # <table we want it from>.query.<method>
            # get() is only for primary key

            # we know that username is unique so this will only give us 1
            # but it will still return as a list so we have to do .first()
            user = User.query.filter_by(username=username).first()
            # method would go here if we were doing anything to user object

            # returns either the instance of the user of None
            if user: # user was found
                # verify password
                # looks at the password in the database = the password you sent in the form
                if user.password == password:
                    # log in
                    login_user(user) #login the user
                    #print('log me in')

                    # take the user back to the homepage
                    return redirect(url_for('homePage'))
                else:
                    # invalid password
                    print('incorrect username(just for security) or password(true)')
            else: # user was not found
                print('incorrect username(true) or password(just for security)')

        return render_template('login.html', form = form)

    @app.route('/logout')
    def logMeOut():
        logout_user()
        # we don't want a render_template here because it would need a form and that's hectic
        return redirect(url_for('loginPage'))
=======================
FORMS.py
    # WE SHOULD ALREADY HAVE THIS:
    class SignUpForm(FlaskForm):
        # behind the scenes, this converts this into fields for HTML
        # specify the type, create instances of those types
            # Type(the label that will show up, validators)
                                                # how do we want to Validate the fields of a form
        username = StringField('Username', validators=[DataRequired()])
        email = StringField('Email', validators=[DataRequired()])
        password = PasswordField('Password', validators=[DataRequired()])               # make sure password is filled in
                                                                                        # the above password is a class, so the '' makes it a string
        confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
        submit = SubmitField('Submit')

    # NOW WE ADD THIS:
    class LoginForm(FlaskForm):
        # behind the scenes, this converts this into fields for HTML
        # specify the type, create instances of those types
            # Type(the label that will show up, validators)
                                                # how do we want to Validate the fields of a form
        username = StringField('Username', validators=[DataRequired()])
        password = PasswordField('Password', validators=[DataRequired()])     
        submit = SubmitField('Submit')
==========================
MODELS.py
    IMPORTS:
    from flask_login import UserMixin

    # this is an EDIT for the User Class parameters
    class User(db.Model, UserMixin)
        id = db.Column(db.Integer, primary_key=True)
        first_name = db.Column(db.String(45), nullable=False)
        last_name = db.Column(db.String(45), nullable=False)
        email = db.Column(db.String(100), nullable=False, unique=True)
        password = db.Column(db.String, nullable=False)
        date_created = db.Column(db.DateTime, nullable = False, default=datetime.utcnow)

    def __init__(self, first_name, email, password):
        self.first_name = first_name
        self.email = email
        self.password = password

    def save_to_db(self):
        db.session.add(self)
        db.session.commit() # actually commits things

==========================
__init__.py
    IMPORTS:
    from flask_login import LoginManager
    from .models import db, User <if User is a Model>

    #after Migrate
    login_manager = LoginManager(app)
    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(user_id)
    
    # this will take you to the loginpage if you try to go to a route
    login_manager.login_view = 'loginPage' 

===========================
LOGIN.HTML - should copy the signup form:

    {% extends 'base.html' %}

    {% block content %}
    <h1>Login</h1>
    <form method="POST">
        {{ form.hidden_tag() }}

        {{form.username(class='form-control', placeholder='Username')}}
        {{form.password(class='form-control', placeholder='Password')}}
        {{form.submit(class='btn btn-primary')}}
    </form>

    {% endblock %}
    
===========================
NAV.HTML - add functionality to show login/signup

  {% if current_user.is_authenticated %}
    # Anything else we want to only show while the user is logged in
    <li class="nav-item">
      <p class="nav-link">Hello, {{ current_user.username }}</p>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="/logout">Log Out</a>
    </li>
  {% else %}
    <li class="nav-item">
      <a class="nav-link active">Hello, Guest</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="/login">Log In</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="/signup">Sign Up</a>
    </li>
  {% endif %}

========================

IF flask_login isn't working:

DELETE my_venv FOLDER, then
python3 -m venv my_venv
source my_venv/bin/activate
pip3 install -r requirements.txt 


IF YOU GET ERROR:
sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedTable) relation "user" does not exist
Make sure you run the commands to get the db working
